@page "/todo"
@using EDT.BlazorWasm.App.Models
@using EDT.BlazorWasm.App.Services.Contracts
@inject ITodoItemService todoItemService;

<h3>Todo (@todos.Count(todo => !todo.IsComplete))</h3>

@if (todos == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Id</th>
                <th>Name</th>
                <th>IsComplete</th>
                <th>Remark</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var todo in todos)
            {
                <tr>
                    <td>@todo.Id.ToString()</td>
                    <td>@todo.Name</td>
                    <td><input type="checkbox" @bind="todo.IsComplete" /></td>
                    <td>@todo.Remark</td>
                </tr>
            }
        </tbody>
    </table>
}

<input placeholder="Todo Item Name (Necessary)" @bind="newTodoItemName" />
<input placeholder="Todo Item Remark (Optioinal)" @bind="newTodoItemRemark" />
<button @onclick="AddTodo">Add todo</button>

@code {
    private IList<TodoItem> todos;
    private string? newTodoItemName;
    private string? newTodoItemRemark;

    protected override async Task OnInitializedAsync()
    {
        todos = await todoItemService.GetTodoItemsAsync();
    }

    private async void AddTodo()
    {
        if (string.IsNullOrWhiteSpace(newTodoItemName))
            return;

        var todoItem = new TodoItem { Name = newTodoItemName, Remark = newTodoItemRemark };
        await todoItemService.AddTodoItemAsync(todoItem);
        // Clear Textboxes
        newTodoItemName = newTodoItemRemark = string.Empty;
        // Refresh Todos
        todos = await todoItemService.GetTodoItemsAsync();
  }
}